/**
* Generated by PluginGenerator from webgme on Thu Jul 17 2014 16:45:05 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/RequirementExporter/RequirementExporter/meta'], function (PluginConfig, PluginBase, MetaTypes) {
    'use strict';

    /**
    * Initializes a new instance of RequirementExporter.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin RequirementExporter.
    * @constructor
    */
    var RequirementExporter = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    RequirementExporter.prototype = Object.create(PluginBase.prototype);
    RequirementExporter.prototype.constructor = RequirementExporter;

    /**
    * Gets the name of the RequirementExporter.
    * @returns {string} The name of the plugin.
    * @public
    */
    RequirementExporter.prototype.getName = function () {
        return "Requirement Exporter";
    };

    /**
    * Gets the semantic version (semver.org) of the RequirementExporter.
    * @returns {string} The version of the plugin.
    * @public
    */
    RequirementExporter.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Gets the description of the RequirementExporter.
    * @returns {string} The description of the plugin.
    * @public
    */
    RequirementExporter.prototype.getDescription = function () {
        return "Exports a requirement to a json representation.";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    RequirementExporter.prototype.main = function (callback) {
        var self = this;
        self.updateMETA(self.metaTypes);

        self.logger.error('Plugin is not implemented yet!');

        self.result.setSuccess(false);
        callback(null, self.result);

    };

    return RequirementExporter;
});